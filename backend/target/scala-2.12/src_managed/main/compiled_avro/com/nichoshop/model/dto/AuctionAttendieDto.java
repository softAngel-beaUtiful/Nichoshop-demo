/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuctionAttendieDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8675164654222013220L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuctionAttendieDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"maxBid\",\"type\":{\"type\":\"record\",\"name\":\"RichMoneyDto\",\"fields\":[{\"name\":\"currencyId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"}]}},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AuctionAttendieDto> ENCODER =
      new BinaryMessageEncoder<AuctionAttendieDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuctionAttendieDto> DECODER =
      new BinaryMessageDecoder<AuctionAttendieDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuctionAttendieDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuctionAttendieDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuctionAttendieDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AuctionAttendieDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuctionAttendieDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuctionAttendieDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuctionAttendieDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AuctionAttendieDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int userId;
   private com.nichoshop.model.dto.RichMoneyDto maxBid;
   private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuctionAttendieDto() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param maxBid The new value for maxBid
   * @param timestamp The new value for timestamp
   */
  public AuctionAttendieDto(java.lang.Integer userId, com.nichoshop.model.dto.RichMoneyDto maxBid, java.lang.Long timestamp) {
    this.userId = userId;
    this.maxBid = maxBid;
    this.timestamp = timestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return maxBid;
    case 2: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.Integer)value$; break;
    case 1: maxBid = (com.nichoshop.model.dto.RichMoneyDto)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public int getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'maxBid' field.
   * @return The value of the 'maxBid' field.
   */
  public com.nichoshop.model.dto.RichMoneyDto getMaxBid() {
    return maxBid;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }



  /**
   * Creates a new AuctionAttendieDto RecordBuilder.
   * @return A new AuctionAttendieDto RecordBuilder
   */
  public static com.nichoshop.model.dto.AuctionAttendieDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.AuctionAttendieDto.Builder();
  }

  /**
   * Creates a new AuctionAttendieDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuctionAttendieDto RecordBuilder
   */
  public static com.nichoshop.model.dto.AuctionAttendieDto.Builder newBuilder(com.nichoshop.model.dto.AuctionAttendieDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.AuctionAttendieDto.Builder();
    } else {
      return new com.nichoshop.model.dto.AuctionAttendieDto.Builder(other);
    }
  }

  /**
   * Creates a new AuctionAttendieDto RecordBuilder by copying an existing AuctionAttendieDto instance.
   * @param other The existing instance to copy.
   * @return A new AuctionAttendieDto RecordBuilder
   */
  public static com.nichoshop.model.dto.AuctionAttendieDto.Builder newBuilder(com.nichoshop.model.dto.AuctionAttendieDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.AuctionAttendieDto.Builder();
    } else {
      return new com.nichoshop.model.dto.AuctionAttendieDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for AuctionAttendieDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuctionAttendieDto>
    implements org.apache.avro.data.RecordBuilder<AuctionAttendieDto> {

    private int userId;
    private com.nichoshop.model.dto.RichMoneyDto maxBid;
    private com.nichoshop.model.dto.RichMoneyDto.Builder maxBidBuilder;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.AuctionAttendieDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.maxBid)) {
        this.maxBid = data().deepCopy(fields()[1].schema(), other.maxBid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasMaxBidBuilder()) {
        this.maxBidBuilder = com.nichoshop.model.dto.RichMoneyDto.newBuilder(other.getMaxBidBuilder());
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AuctionAttendieDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.AuctionAttendieDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maxBid)) {
        this.maxBid = data().deepCopy(fields()[1].schema(), other.maxBid);
        fieldSetFlags()[1] = true;
      }
      this.maxBidBuilder = null;
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public int getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionAttendieDto.Builder setUserId(int value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionAttendieDto.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxBid' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.RichMoneyDto getMaxBid() {
      return maxBid;
    }


    /**
      * Sets the value of the 'maxBid' field.
      * @param value The value of 'maxBid'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionAttendieDto.Builder setMaxBid(com.nichoshop.model.dto.RichMoneyDto value) {
      validate(fields()[1], value);
      this.maxBidBuilder = null;
      this.maxBid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'maxBid' field has been set.
      * @return True if the 'maxBid' field has been set, false otherwise.
      */
    public boolean hasMaxBid() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'maxBid' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.nichoshop.model.dto.RichMoneyDto.Builder getMaxBidBuilder() {
      if (maxBidBuilder == null) {
        if (hasMaxBid()) {
          setMaxBidBuilder(com.nichoshop.model.dto.RichMoneyDto.newBuilder(maxBid));
        } else {
          setMaxBidBuilder(com.nichoshop.model.dto.RichMoneyDto.newBuilder());
        }
      }
      return maxBidBuilder;
    }

    /**
     * Sets the Builder instance for the 'maxBid' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nichoshop.model.dto.AuctionAttendieDto.Builder setMaxBidBuilder(com.nichoshop.model.dto.RichMoneyDto.Builder value) {
      clearMaxBid();
      maxBidBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'maxBid' field has an active Builder instance
     * @return True if the 'maxBid' field has an active Builder instance
     */
    public boolean hasMaxBidBuilder() {
      return maxBidBuilder != null;
    }

    /**
      * Clears the value of the 'maxBid' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionAttendieDto.Builder clearMaxBid() {
      maxBid = null;
      maxBidBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionAttendieDto.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionAttendieDto.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuctionAttendieDto build() {
      try {
        AuctionAttendieDto record = new AuctionAttendieDto();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.Integer) defaultValue(fields()[0]);
        if (maxBidBuilder != null) {
          try {
            record.maxBid = this.maxBidBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("maxBid"));
            throw e;
          }
        } else {
          record.maxBid = fieldSetFlags()[1] ? this.maxBid : (com.nichoshop.model.dto.RichMoneyDto) defaultValue(fields()[1]);
        }
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuctionAttendieDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuctionAttendieDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuctionAttendieDto>
    READER$ = (org.apache.avro.io.DatumReader<AuctionAttendieDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.userId);

    this.maxBid.customEncode(out);

    out.writeLong(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userId = in.readInt();

      if (this.maxBid == null) {
        this.maxBid = new com.nichoshop.model.dto.RichMoneyDto();
      }
      this.maxBid.customDecode(in);

      this.timestamp = in.readLong();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userId = in.readInt();
          break;

        case 1:
          if (this.maxBid == null) {
            this.maxBid = new com.nichoshop.model.dto.RichMoneyDto();
          }
          this.maxBid.customDecode(in);
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










