/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OfferDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5825191670507853525L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OfferDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"pricePerItem\",\"type\":{\"type\":\"record\",\"name\":\"RichMoneyDto\",\"fields\":[{\"name\":\"currencyId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"}]}},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"accepted\",\"type\":\"boolean\",\"default\":false},{\"name\":\"rejected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OfferDto> ENCODER =
      new BinaryMessageEncoder<OfferDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OfferDto> DECODER =
      new BinaryMessageDecoder<OfferDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OfferDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OfferDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OfferDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OfferDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OfferDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OfferDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OfferDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OfferDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int id;
   private int userId;
   private long created;
   private com.nichoshop.model.dto.RichMoneyDto pricePerItem;
   private int qty;
   private boolean accepted;
   private boolean rejected;
   private java.lang.String message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OfferDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param userId The new value for userId
   * @param created The new value for created
   * @param pricePerItem The new value for pricePerItem
   * @param qty The new value for qty
   * @param accepted The new value for accepted
   * @param rejected The new value for rejected
   * @param message The new value for message
   */
  public OfferDto(java.lang.Integer id, java.lang.Integer userId, java.lang.Long created, com.nichoshop.model.dto.RichMoneyDto pricePerItem, java.lang.Integer qty, java.lang.Boolean accepted, java.lang.Boolean rejected, java.lang.String message) {
    this.id = id;
    this.userId = userId;
    this.created = created;
    this.pricePerItem = pricePerItem;
    this.qty = qty;
    this.accepted = accepted;
    this.rejected = rejected;
    this.message = message;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userId;
    case 2: return created;
    case 3: return pricePerItem;
    case 4: return qty;
    case 5: return accepted;
    case 6: return rejected;
    case 7: return message;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: userId = (java.lang.Integer)value$; break;
    case 2: created = (java.lang.Long)value$; break;
    case 3: pricePerItem = (com.nichoshop.model.dto.RichMoneyDto)value$; break;
    case 4: qty = (java.lang.Integer)value$; break;
    case 5: accepted = (java.lang.Boolean)value$; break;
    case 6: rejected = (java.lang.Boolean)value$; break;
    case 7: message = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public int getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public long getCreated() {
    return created;
  }



  /**
   * Gets the value of the 'pricePerItem' field.
   * @return The value of the 'pricePerItem' field.
   */
  public com.nichoshop.model.dto.RichMoneyDto getPricePerItem() {
    return pricePerItem;
  }



  /**
   * Gets the value of the 'qty' field.
   * @return The value of the 'qty' field.
   */
  public int getQty() {
    return qty;
  }



  /**
   * Gets the value of the 'accepted' field.
   * @return The value of the 'accepted' field.
   */
  public boolean getAccepted() {
    return accepted;
  }



  /**
   * Gets the value of the 'rejected' field.
   * @return The value of the 'rejected' field.
   */
  public boolean getRejected() {
    return rejected;
  }



  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }



  /**
   * Creates a new OfferDto RecordBuilder.
   * @return A new OfferDto RecordBuilder
   */
  public static com.nichoshop.model.dto.OfferDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.OfferDto.Builder();
  }

  /**
   * Creates a new OfferDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OfferDto RecordBuilder
   */
  public static com.nichoshop.model.dto.OfferDto.Builder newBuilder(com.nichoshop.model.dto.OfferDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.OfferDto.Builder();
    } else {
      return new com.nichoshop.model.dto.OfferDto.Builder(other);
    }
  }

  /**
   * Creates a new OfferDto RecordBuilder by copying an existing OfferDto instance.
   * @param other The existing instance to copy.
   * @return A new OfferDto RecordBuilder
   */
  public static com.nichoshop.model.dto.OfferDto.Builder newBuilder(com.nichoshop.model.dto.OfferDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.OfferDto.Builder();
    } else {
      return new com.nichoshop.model.dto.OfferDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for OfferDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OfferDto>
    implements org.apache.avro.data.RecordBuilder<OfferDto> {

    private int id;
    private int userId;
    private long created;
    private com.nichoshop.model.dto.RichMoneyDto pricePerItem;
    private com.nichoshop.model.dto.RichMoneyDto.Builder pricePerItemBuilder;
    private int qty;
    private boolean accepted;
    private boolean rejected;
    private java.lang.String message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.OfferDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.created)) {
        this.created = data().deepCopy(fields()[2].schema(), other.created);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pricePerItem)) {
        this.pricePerItem = data().deepCopy(fields()[3].schema(), other.pricePerItem);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasPricePerItemBuilder()) {
        this.pricePerItemBuilder = com.nichoshop.model.dto.RichMoneyDto.newBuilder(other.getPricePerItemBuilder());
      }
      if (isValidValue(fields()[4], other.qty)) {
        this.qty = data().deepCopy(fields()[4].schema(), other.qty);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.accepted)) {
        this.accepted = data().deepCopy(fields()[5].schema(), other.accepted);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.rejected)) {
        this.rejected = data().deepCopy(fields()[6].schema(), other.rejected);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.message)) {
        this.message = data().deepCopy(fields()[7].schema(), other.message);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing OfferDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.OfferDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.created)) {
        this.created = data().deepCopy(fields()[2].schema(), other.created);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pricePerItem)) {
        this.pricePerItem = data().deepCopy(fields()[3].schema(), other.pricePerItem);
        fieldSetFlags()[3] = true;
      }
      this.pricePerItemBuilder = null;
      if (isValidValue(fields()[4], other.qty)) {
        this.qty = data().deepCopy(fields()[4].schema(), other.qty);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.accepted)) {
        this.accepted = data().deepCopy(fields()[5].schema(), other.accepted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.rejected)) {
        this.rejected = data().deepCopy(fields()[6].schema(), other.rejected);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.message)) {
        this.message = data().deepCopy(fields()[7].schema(), other.message);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public int getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder setUserId(int value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder clearUserId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public long getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder setCreated(long value) {
      validate(fields()[2], value);
      this.created = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder clearCreated() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pricePerItem' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.RichMoneyDto getPricePerItem() {
      return pricePerItem;
    }


    /**
      * Sets the value of the 'pricePerItem' field.
      * @param value The value of 'pricePerItem'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder setPricePerItem(com.nichoshop.model.dto.RichMoneyDto value) {
      validate(fields()[3], value);
      this.pricePerItemBuilder = null;
      this.pricePerItem = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pricePerItem' field has been set.
      * @return True if the 'pricePerItem' field has been set, false otherwise.
      */
    public boolean hasPricePerItem() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'pricePerItem' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.nichoshop.model.dto.RichMoneyDto.Builder getPricePerItemBuilder() {
      if (pricePerItemBuilder == null) {
        if (hasPricePerItem()) {
          setPricePerItemBuilder(com.nichoshop.model.dto.RichMoneyDto.newBuilder(pricePerItem));
        } else {
          setPricePerItemBuilder(com.nichoshop.model.dto.RichMoneyDto.newBuilder());
        }
      }
      return pricePerItemBuilder;
    }

    /**
     * Sets the Builder instance for the 'pricePerItem' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nichoshop.model.dto.OfferDto.Builder setPricePerItemBuilder(com.nichoshop.model.dto.RichMoneyDto.Builder value) {
      clearPricePerItem();
      pricePerItemBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'pricePerItem' field has an active Builder instance
     * @return True if the 'pricePerItem' field has an active Builder instance
     */
    public boolean hasPricePerItemBuilder() {
      return pricePerItemBuilder != null;
    }

    /**
      * Clears the value of the 'pricePerItem' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder clearPricePerItem() {
      pricePerItem = null;
      pricePerItemBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'qty' field.
      * @return The value.
      */
    public int getQty() {
      return qty;
    }


    /**
      * Sets the value of the 'qty' field.
      * @param value The value of 'qty'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder setQty(int value) {
      validate(fields()[4], value);
      this.qty = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'qty' field has been set.
      * @return True if the 'qty' field has been set, false otherwise.
      */
    public boolean hasQty() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'qty' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder clearQty() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'accepted' field.
      * @return The value.
      */
    public boolean getAccepted() {
      return accepted;
    }


    /**
      * Sets the value of the 'accepted' field.
      * @param value The value of 'accepted'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder setAccepted(boolean value) {
      validate(fields()[5], value);
      this.accepted = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'accepted' field has been set.
      * @return True if the 'accepted' field has been set, false otherwise.
      */
    public boolean hasAccepted() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'accepted' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder clearAccepted() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'rejected' field.
      * @return The value.
      */
    public boolean getRejected() {
      return rejected;
    }


    /**
      * Sets the value of the 'rejected' field.
      * @param value The value of 'rejected'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder setRejected(boolean value) {
      validate(fields()[6], value);
      this.rejected = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'rejected' field has been set.
      * @return True if the 'rejected' field has been set, false otherwise.
      */
    public boolean hasRejected() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'rejected' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder clearRejected() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder setMessage(java.lang.String value) {
      validate(fields()[7], value);
      this.message = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferDto.Builder clearMessage() {
      message = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OfferDto build() {
      try {
        OfferDto record = new OfferDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.Integer) defaultValue(fields()[1]);
        record.created = fieldSetFlags()[2] ? this.created : (java.lang.Long) defaultValue(fields()[2]);
        if (pricePerItemBuilder != null) {
          try {
            record.pricePerItem = this.pricePerItemBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("pricePerItem"));
            throw e;
          }
        } else {
          record.pricePerItem = fieldSetFlags()[3] ? this.pricePerItem : (com.nichoshop.model.dto.RichMoneyDto) defaultValue(fields()[3]);
        }
        record.qty = fieldSetFlags()[4] ? this.qty : (java.lang.Integer) defaultValue(fields()[4]);
        record.accepted = fieldSetFlags()[5] ? this.accepted : (java.lang.Boolean) defaultValue(fields()[5]);
        record.rejected = fieldSetFlags()[6] ? this.rejected : (java.lang.Boolean) defaultValue(fields()[6]);
        record.message = fieldSetFlags()[7] ? this.message : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OfferDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<OfferDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OfferDto>
    READER$ = (org.apache.avro.io.DatumReader<OfferDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeInt(this.userId);

    out.writeLong(this.created);

    this.pricePerItem.customEncode(out);

    out.writeInt(this.qty);

    out.writeBoolean(this.accepted);

    out.writeBoolean(this.rejected);

    if (this.message == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.message);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.userId = in.readInt();

      this.created = in.readLong();

      if (this.pricePerItem == null) {
        this.pricePerItem = new com.nichoshop.model.dto.RichMoneyDto();
      }
      this.pricePerItem.customDecode(in);

      this.qty = in.readInt();

      this.accepted = in.readBoolean();

      this.rejected = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.message = null;
      } else {
        this.message = in.readString();
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.userId = in.readInt();
          break;

        case 2:
          this.created = in.readLong();
          break;

        case 3:
          if (this.pricePerItem == null) {
            this.pricePerItem = new com.nichoshop.model.dto.RichMoneyDto();
          }
          this.pricePerItem.customDecode(in);
          break;

        case 4:
          this.qty = in.readInt();
          break;

        case 5:
          this.accepted = in.readBoolean();
          break;

        case 6:
          this.rejected = in.readBoolean();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.message = null;
          } else {
            this.message = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










