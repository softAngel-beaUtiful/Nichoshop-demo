/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6561546915982208145L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"userid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"registrationTimestamp\",\"type\":\"long\"},{\"name\":\"emailConfirmed\",\"type\":\"boolean\"},{\"name\":\"suspended\",\"type\":\"boolean\"},{\"name\":\"roles\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"Role\",\"symbols\":[\"CUSTOMER\",\"ADMIN\",\"CUSTOMER_SUPPORT\"]}}]},{\"name\":\"permissions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Permission\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"userid\",\"type\":\"int\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserDto> ENCODER =
      new BinaryMessageEncoder<UserDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserDto> DECODER =
      new BinaryMessageDecoder<UserDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int id;
   private java.lang.String userid;
   private java.lang.String email;
   private java.lang.String firstName;
   private java.lang.String lastName;
   private long registrationTimestamp;
   private boolean emailConfirmed;
   private boolean suspended;
   private java.util.List<com.nichoshop.model.dto.Role> roles;
   private java.util.List<com.nichoshop.model.dto.Permission> permissions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param userid The new value for userid
   * @param email The new value for email
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param registrationTimestamp The new value for registrationTimestamp
   * @param emailConfirmed The new value for emailConfirmed
   * @param suspended The new value for suspended
   * @param roles The new value for roles
   * @param permissions The new value for permissions
   */
  public UserDto(java.lang.Integer id, java.lang.String userid, java.lang.String email, java.lang.String firstName, java.lang.String lastName, java.lang.Long registrationTimestamp, java.lang.Boolean emailConfirmed, java.lang.Boolean suspended, java.util.List<com.nichoshop.model.dto.Role> roles, java.util.List<com.nichoshop.model.dto.Permission> permissions) {
    this.id = id;
    this.userid = userid;
    this.email = email;
    this.firstName = firstName;
    this.lastName = lastName;
    this.registrationTimestamp = registrationTimestamp;
    this.emailConfirmed = emailConfirmed;
    this.suspended = suspended;
    this.roles = roles;
    this.permissions = permissions;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userid;
    case 2: return email;
    case 3: return firstName;
    case 4: return lastName;
    case 5: return registrationTimestamp;
    case 6: return emailConfirmed;
    case 7: return suspended;
    case 8: return roles;
    case 9: return permissions;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: userid = value$ != null ? value$.toString() : null; break;
    case 2: email = value$ != null ? value$.toString() : null; break;
    case 3: firstName = value$ != null ? value$.toString() : null; break;
    case 4: lastName = value$ != null ? value$.toString() : null; break;
    case 5: registrationTimestamp = (java.lang.Long)value$; break;
    case 6: emailConfirmed = (java.lang.Boolean)value$; break;
    case 7: suspended = (java.lang.Boolean)value$; break;
    case 8: roles = (java.util.List<com.nichoshop.model.dto.Role>)value$; break;
    case 9: permissions = (java.util.List<com.nichoshop.model.dto.Permission>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }



  /**
   * Gets the value of the 'userid' field.
   * @return The value of the 'userid' field.
   */
  public java.lang.String getUserid() {
    return userid;
  }



  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }



  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.String getFirstName() {
    return firstName;
  }



  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.String getLastName() {
    return lastName;
  }



  /**
   * Gets the value of the 'registrationTimestamp' field.
   * @return The value of the 'registrationTimestamp' field.
   */
  public long getRegistrationTimestamp() {
    return registrationTimestamp;
  }



  /**
   * Gets the value of the 'emailConfirmed' field.
   * @return The value of the 'emailConfirmed' field.
   */
  public boolean getEmailConfirmed() {
    return emailConfirmed;
  }



  /**
   * Gets the value of the 'suspended' field.
   * @return The value of the 'suspended' field.
   */
  public boolean getSuspended() {
    return suspended;
  }



  /**
   * Gets the value of the 'roles' field.
   * @return The value of the 'roles' field.
   */
  public java.util.List<com.nichoshop.model.dto.Role> getRoles() {
    return roles;
  }



  /**
   * Gets the value of the 'permissions' field.
   * @return The value of the 'permissions' field.
   */
  public java.util.List<com.nichoshop.model.dto.Permission> getPermissions() {
    return permissions;
  }



  /**
   * Creates a new UserDto RecordBuilder.
   * @return A new UserDto RecordBuilder
   */
  public static com.nichoshop.model.dto.UserDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.UserDto.Builder();
  }

  /**
   * Creates a new UserDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserDto RecordBuilder
   */
  public static com.nichoshop.model.dto.UserDto.Builder newBuilder(com.nichoshop.model.dto.UserDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.UserDto.Builder();
    } else {
      return new com.nichoshop.model.dto.UserDto.Builder(other);
    }
  }

  /**
   * Creates a new UserDto RecordBuilder by copying an existing UserDto instance.
   * @param other The existing instance to copy.
   * @return A new UserDto RecordBuilder
   */
  public static com.nichoshop.model.dto.UserDto.Builder newBuilder(com.nichoshop.model.dto.UserDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.UserDto.Builder();
    } else {
      return new com.nichoshop.model.dto.UserDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserDto>
    implements org.apache.avro.data.RecordBuilder<UserDto> {

    private int id;
    private java.lang.String userid;
    private java.lang.String email;
    private java.lang.String firstName;
    private java.lang.String lastName;
    private long registrationTimestamp;
    private boolean emailConfirmed;
    private boolean suspended;
    private java.util.List<com.nichoshop.model.dto.Role> roles;
    private java.util.List<com.nichoshop.model.dto.Permission> permissions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.UserDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userid)) {
        this.userid = data().deepCopy(fields()[1].schema(), other.userid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.firstName)) {
        this.firstName = data().deepCopy(fields()[3].schema(), other.firstName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.lastName)) {
        this.lastName = data().deepCopy(fields()[4].schema(), other.lastName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.registrationTimestamp)) {
        this.registrationTimestamp = data().deepCopy(fields()[5].schema(), other.registrationTimestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.emailConfirmed)) {
        this.emailConfirmed = data().deepCopy(fields()[6].schema(), other.emailConfirmed);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.suspended)) {
        this.suspended = data().deepCopy(fields()[7].schema(), other.suspended);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.roles)) {
        this.roles = data().deepCopy(fields()[8].schema(), other.roles);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.permissions)) {
        this.permissions = data().deepCopy(fields()[9].schema(), other.permissions);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing UserDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.UserDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userid)) {
        this.userid = data().deepCopy(fields()[1].schema(), other.userid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.firstName)) {
        this.firstName = data().deepCopy(fields()[3].schema(), other.firstName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastName)) {
        this.lastName = data().deepCopy(fields()[4].schema(), other.lastName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.registrationTimestamp)) {
        this.registrationTimestamp = data().deepCopy(fields()[5].schema(), other.registrationTimestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.emailConfirmed)) {
        this.emailConfirmed = data().deepCopy(fields()[6].schema(), other.emailConfirmed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.suspended)) {
        this.suspended = data().deepCopy(fields()[7].schema(), other.suspended);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.roles)) {
        this.roles = data().deepCopy(fields()[8].schema(), other.roles);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.permissions)) {
        this.permissions = data().deepCopy(fields()[9].schema(), other.permissions);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userid' field.
      * @return The value.
      */
    public java.lang.String getUserid() {
      return userid;
    }


    /**
      * Sets the value of the 'userid' field.
      * @param value The value of 'userid'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setUserid(java.lang.String value) {
      validate(fields()[1], value);
      this.userid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userid' field has been set.
      * @return True if the 'userid' field has been set, false otherwise.
      */
    public boolean hasUserid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userid' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearUserid() {
      userid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setEmail(java.lang.String value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setFirstName(java.lang.String value) {
      validate(fields()[3], value);
      this.firstName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setLastName(java.lang.String value) {
      validate(fields()[4], value);
      this.lastName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'registrationTimestamp' field.
      * @return The value.
      */
    public long getRegistrationTimestamp() {
      return registrationTimestamp;
    }


    /**
      * Sets the value of the 'registrationTimestamp' field.
      * @param value The value of 'registrationTimestamp'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setRegistrationTimestamp(long value) {
      validate(fields()[5], value);
      this.registrationTimestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'registrationTimestamp' field has been set.
      * @return True if the 'registrationTimestamp' field has been set, false otherwise.
      */
    public boolean hasRegistrationTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'registrationTimestamp' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearRegistrationTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailConfirmed' field.
      * @return The value.
      */
    public boolean getEmailConfirmed() {
      return emailConfirmed;
    }


    /**
      * Sets the value of the 'emailConfirmed' field.
      * @param value The value of 'emailConfirmed'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setEmailConfirmed(boolean value) {
      validate(fields()[6], value);
      this.emailConfirmed = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'emailConfirmed' field has been set.
      * @return True if the 'emailConfirmed' field has been set, false otherwise.
      */
    public boolean hasEmailConfirmed() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'emailConfirmed' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearEmailConfirmed() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'suspended' field.
      * @return The value.
      */
    public boolean getSuspended() {
      return suspended;
    }


    /**
      * Sets the value of the 'suspended' field.
      * @param value The value of 'suspended'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setSuspended(boolean value) {
      validate(fields()[7], value);
      this.suspended = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'suspended' field has been set.
      * @return True if the 'suspended' field has been set, false otherwise.
      */
    public boolean hasSuspended() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'suspended' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearSuspended() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'roles' field.
      * @return The value.
      */
    public java.util.List<com.nichoshop.model.dto.Role> getRoles() {
      return roles;
    }


    /**
      * Sets the value of the 'roles' field.
      * @param value The value of 'roles'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setRoles(java.util.List<com.nichoshop.model.dto.Role> value) {
      validate(fields()[8], value);
      this.roles = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'roles' field has been set.
      * @return True if the 'roles' field has been set, false otherwise.
      */
    public boolean hasRoles() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'roles' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearRoles() {
      roles = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'permissions' field.
      * @return The value.
      */
    public java.util.List<com.nichoshop.model.dto.Permission> getPermissions() {
      return permissions;
    }


    /**
      * Sets the value of the 'permissions' field.
      * @param value The value of 'permissions'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder setPermissions(java.util.List<com.nichoshop.model.dto.Permission> value) {
      validate(fields()[9], value);
      this.permissions = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'permissions' field has been set.
      * @return True if the 'permissions' field has been set, false otherwise.
      */
    public boolean hasPermissions() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'permissions' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.UserDto.Builder clearPermissions() {
      permissions = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserDto build() {
      try {
        UserDto record = new UserDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.userid = fieldSetFlags()[1] ? this.userid : (java.lang.String) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.String) defaultValue(fields()[2]);
        record.firstName = fieldSetFlags()[3] ? this.firstName : (java.lang.String) defaultValue(fields()[3]);
        record.lastName = fieldSetFlags()[4] ? this.lastName : (java.lang.String) defaultValue(fields()[4]);
        record.registrationTimestamp = fieldSetFlags()[5] ? this.registrationTimestamp : (java.lang.Long) defaultValue(fields()[5]);
        record.emailConfirmed = fieldSetFlags()[6] ? this.emailConfirmed : (java.lang.Boolean) defaultValue(fields()[6]);
        record.suspended = fieldSetFlags()[7] ? this.suspended : (java.lang.Boolean) defaultValue(fields()[7]);
        record.roles = fieldSetFlags()[8] ? this.roles : (java.util.List<com.nichoshop.model.dto.Role>) defaultValue(fields()[8]);
        record.permissions = fieldSetFlags()[9] ? this.permissions : (java.util.List<com.nichoshop.model.dto.Permission>) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserDto>
    READER$ = (org.apache.avro.io.DatumReader<UserDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeString(this.userid);

    out.writeString(this.email);

    out.writeString(this.firstName);

    out.writeString(this.lastName);

    out.writeLong(this.registrationTimestamp);

    out.writeBoolean(this.emailConfirmed);

    out.writeBoolean(this.suspended);

    if (this.roles == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.roles.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.nichoshop.model.dto.Role e0: this.roles) {
        actualSize0++;
        out.startItem();
        out.writeEnum(e0.ordinal());
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.permissions == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.permissions.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (com.nichoshop.model.dto.Permission e1: this.permissions) {
        actualSize1++;
        out.startItem();
        e1.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.userid = in.readString();

      this.email = in.readString();

      this.firstName = in.readString();

      this.lastName = in.readString();

      this.registrationTimestamp = in.readLong();

      this.emailConfirmed = in.readBoolean();

      this.suspended = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.roles = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.nichoshop.model.dto.Role> a0 = this.roles;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.nichoshop.model.dto.Role>((int)size0, SCHEMA$.getField("roles").schema().getTypes().get(1));
          this.roles = a0;
        } else a0.clear();
        SpecificData.Array<com.nichoshop.model.dto.Role> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.Role>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.nichoshop.model.dto.Role e0 = (ga0 != null ? ga0.peek() : null);
            e0 = com.nichoshop.model.dto.Role.values()[in.readEnum()];
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.permissions = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<com.nichoshop.model.dto.Permission> a1 = this.permissions;
        if (a1 == null) {
          a1 = new SpecificData.Array<com.nichoshop.model.dto.Permission>((int)size1, SCHEMA$.getField("permissions").schema().getTypes().get(1));
          this.permissions = a1;
        } else a1.clear();
        SpecificData.Array<com.nichoshop.model.dto.Permission> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.Permission>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            com.nichoshop.model.dto.Permission e1 = (ga1 != null ? ga1.peek() : null);
            if (e1 == null) {
              e1 = new com.nichoshop.model.dto.Permission();
            }
            e1.customDecode(in);
            a1.add(e1);
          }
        }
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.userid = in.readString();
          break;

        case 2:
          this.email = in.readString();
          break;

        case 3:
          this.firstName = in.readString();
          break;

        case 4:
          this.lastName = in.readString();
          break;

        case 5:
          this.registrationTimestamp = in.readLong();
          break;

        case 6:
          this.emailConfirmed = in.readBoolean();
          break;

        case 7:
          this.suspended = in.readBoolean();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.roles = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.nichoshop.model.dto.Role> a0 = this.roles;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.nichoshop.model.dto.Role>((int)size0, SCHEMA$.getField("roles").schema().getTypes().get(1));
              this.roles = a0;
            } else a0.clear();
            SpecificData.Array<com.nichoshop.model.dto.Role> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.Role>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.nichoshop.model.dto.Role e0 = (ga0 != null ? ga0.peek() : null);
                e0 = com.nichoshop.model.dto.Role.values()[in.readEnum()];
                a0.add(e0);
              }
            }
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.permissions = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<com.nichoshop.model.dto.Permission> a1 = this.permissions;
            if (a1 == null) {
              a1 = new SpecificData.Array<com.nichoshop.model.dto.Permission>((int)size1, SCHEMA$.getField("permissions").schema().getTypes().get(1));
              this.permissions = a1;
            } else a1.clear();
            SpecificData.Array<com.nichoshop.model.dto.Permission> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.Permission>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                com.nichoshop.model.dto.Permission e1 = (ga1 != null ? ga1.peek() : null);
                if (e1 == null) {
                  e1 = new com.nichoshop.model.dto.Permission();
                }
                e1.customDecode(in);
                a1.add(e1);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










