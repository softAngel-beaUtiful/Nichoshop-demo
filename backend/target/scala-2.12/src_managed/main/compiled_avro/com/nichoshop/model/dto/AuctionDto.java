/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuctionDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4388716216168618268L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuctionDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"product\",\"type\":{\"type\":\"record\",\"name\":\"ProductDto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"categoryId\",\"type\":\"int\"},{\"name\":\"sellerId\",\"type\":\"int\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"variants\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProductVariantDto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"price\",\"type\":{\"type\":\"record\",\"name\":\"RichMoneyDto\",\"fields\":[{\"name\":\"currencyId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"}]}},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"condition\",\"type\":{\"type\":\"enum\",\"name\":\"ProductCondition\",\"symbols\":[\"NEW\",\"USED\"]},\"default\":\"NEW\"},{\"name\":\"offerScopes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferScopeDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"offers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"pricePerItem\",\"type\":\"RichMoneyDto\"},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"accepted\",\"type\":\"boolean\",\"default\":false},{\"name\":\"rejected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null}]}}],\"default\":null}]}}}]}},{\"name\":\"currentPrice\",\"type\":\"RichMoneyDto\"},{\"name\":\"winner\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AuctionAttendieDto\",\"fields\":[{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"maxBid\",\"type\":\"RichMoneyDto\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}],\"default\":null},{\"name\":\"startAt\",\"type\":\"long\"},{\"name\":\"finishAt\",\"type\":\"long\"},{\"name\":\"attendies\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"AuctionAttendieDto\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AuctionDto> ENCODER =
      new BinaryMessageEncoder<AuctionDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuctionDto> DECODER =
      new BinaryMessageDecoder<AuctionDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuctionDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuctionDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuctionDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AuctionDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuctionDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuctionDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuctionDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AuctionDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int id;
   private com.nichoshop.model.dto.ProductDto product;
   private com.nichoshop.model.dto.RichMoneyDto currentPrice;
   private com.nichoshop.model.dto.AuctionAttendieDto winner;
   private long startAt;
   private long finishAt;
   private java.util.List<com.nichoshop.model.dto.AuctionAttendieDto> attendies;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuctionDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param product The new value for product
   * @param currentPrice The new value for currentPrice
   * @param winner The new value for winner
   * @param startAt The new value for startAt
   * @param finishAt The new value for finishAt
   * @param attendies The new value for attendies
   */
  public AuctionDto(java.lang.Integer id, com.nichoshop.model.dto.ProductDto product, com.nichoshop.model.dto.RichMoneyDto currentPrice, com.nichoshop.model.dto.AuctionAttendieDto winner, java.lang.Long startAt, java.lang.Long finishAt, java.util.List<com.nichoshop.model.dto.AuctionAttendieDto> attendies) {
    this.id = id;
    this.product = product;
    this.currentPrice = currentPrice;
    this.winner = winner;
    this.startAt = startAt;
    this.finishAt = finishAt;
    this.attendies = attendies;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return product;
    case 2: return currentPrice;
    case 3: return winner;
    case 4: return startAt;
    case 5: return finishAt;
    case 6: return attendies;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: product = (com.nichoshop.model.dto.ProductDto)value$; break;
    case 2: currentPrice = (com.nichoshop.model.dto.RichMoneyDto)value$; break;
    case 3: winner = (com.nichoshop.model.dto.AuctionAttendieDto)value$; break;
    case 4: startAt = (java.lang.Long)value$; break;
    case 5: finishAt = (java.lang.Long)value$; break;
    case 6: attendies = (java.util.List<com.nichoshop.model.dto.AuctionAttendieDto>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }



  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public com.nichoshop.model.dto.ProductDto getProduct() {
    return product;
  }



  /**
   * Gets the value of the 'currentPrice' field.
   * @return The value of the 'currentPrice' field.
   */
  public com.nichoshop.model.dto.RichMoneyDto getCurrentPrice() {
    return currentPrice;
  }



  /**
   * Gets the value of the 'winner' field.
   * @return The value of the 'winner' field.
   */
  public com.nichoshop.model.dto.AuctionAttendieDto getWinner() {
    return winner;
  }



  /**
   * Gets the value of the 'startAt' field.
   * @return The value of the 'startAt' field.
   */
  public long getStartAt() {
    return startAt;
  }



  /**
   * Gets the value of the 'finishAt' field.
   * @return The value of the 'finishAt' field.
   */
  public long getFinishAt() {
    return finishAt;
  }



  /**
   * Gets the value of the 'attendies' field.
   * @return The value of the 'attendies' field.
   */
  public java.util.List<com.nichoshop.model.dto.AuctionAttendieDto> getAttendies() {
    return attendies;
  }



  /**
   * Creates a new AuctionDto RecordBuilder.
   * @return A new AuctionDto RecordBuilder
   */
  public static com.nichoshop.model.dto.AuctionDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.AuctionDto.Builder();
  }

  /**
   * Creates a new AuctionDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuctionDto RecordBuilder
   */
  public static com.nichoshop.model.dto.AuctionDto.Builder newBuilder(com.nichoshop.model.dto.AuctionDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.AuctionDto.Builder();
    } else {
      return new com.nichoshop.model.dto.AuctionDto.Builder(other);
    }
  }

  /**
   * Creates a new AuctionDto RecordBuilder by copying an existing AuctionDto instance.
   * @param other The existing instance to copy.
   * @return A new AuctionDto RecordBuilder
   */
  public static com.nichoshop.model.dto.AuctionDto.Builder newBuilder(com.nichoshop.model.dto.AuctionDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.AuctionDto.Builder();
    } else {
      return new com.nichoshop.model.dto.AuctionDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for AuctionDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuctionDto>
    implements org.apache.avro.data.RecordBuilder<AuctionDto> {

    private int id;
    private com.nichoshop.model.dto.ProductDto product;
    private com.nichoshop.model.dto.ProductDto.Builder productBuilder;
    private com.nichoshop.model.dto.RichMoneyDto currentPrice;
    private com.nichoshop.model.dto.RichMoneyDto.Builder currentPriceBuilder;
    private com.nichoshop.model.dto.AuctionAttendieDto winner;
    private com.nichoshop.model.dto.AuctionAttendieDto.Builder winnerBuilder;
    private long startAt;
    private long finishAt;
    private java.util.List<com.nichoshop.model.dto.AuctionAttendieDto> attendies;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.AuctionDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.product)) {
        this.product = data().deepCopy(fields()[1].schema(), other.product);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasProductBuilder()) {
        this.productBuilder = com.nichoshop.model.dto.ProductDto.newBuilder(other.getProductBuilder());
      }
      if (isValidValue(fields()[2], other.currentPrice)) {
        this.currentPrice = data().deepCopy(fields()[2].schema(), other.currentPrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasCurrentPriceBuilder()) {
        this.currentPriceBuilder = com.nichoshop.model.dto.RichMoneyDto.newBuilder(other.getCurrentPriceBuilder());
      }
      if (isValidValue(fields()[3], other.winner)) {
        this.winner = data().deepCopy(fields()[3].schema(), other.winner);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasWinnerBuilder()) {
        this.winnerBuilder = com.nichoshop.model.dto.AuctionAttendieDto.newBuilder(other.getWinnerBuilder());
      }
      if (isValidValue(fields()[4], other.startAt)) {
        this.startAt = data().deepCopy(fields()[4].schema(), other.startAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.finishAt)) {
        this.finishAt = data().deepCopy(fields()[5].schema(), other.finishAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.attendies)) {
        this.attendies = data().deepCopy(fields()[6].schema(), other.attendies);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing AuctionDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.AuctionDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.product)) {
        this.product = data().deepCopy(fields()[1].schema(), other.product);
        fieldSetFlags()[1] = true;
      }
      this.productBuilder = null;
      if (isValidValue(fields()[2], other.currentPrice)) {
        this.currentPrice = data().deepCopy(fields()[2].schema(), other.currentPrice);
        fieldSetFlags()[2] = true;
      }
      this.currentPriceBuilder = null;
      if (isValidValue(fields()[3], other.winner)) {
        this.winner = data().deepCopy(fields()[3].schema(), other.winner);
        fieldSetFlags()[3] = true;
      }
      this.winnerBuilder = null;
      if (isValidValue(fields()[4], other.startAt)) {
        this.startAt = data().deepCopy(fields()[4].schema(), other.startAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.finishAt)) {
        this.finishAt = data().deepCopy(fields()[5].schema(), other.finishAt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.attendies)) {
        this.attendies = data().deepCopy(fields()[6].schema(), other.attendies);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.ProductDto getProduct() {
      return product;
    }


    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder setProduct(com.nichoshop.model.dto.ProductDto value) {
      validate(fields()[1], value);
      this.productBuilder = null;
      this.product = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'product' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.nichoshop.model.dto.ProductDto.Builder getProductBuilder() {
      if (productBuilder == null) {
        if (hasProduct()) {
          setProductBuilder(com.nichoshop.model.dto.ProductDto.newBuilder(product));
        } else {
          setProductBuilder(com.nichoshop.model.dto.ProductDto.newBuilder());
        }
      }
      return productBuilder;
    }

    /**
     * Sets the Builder instance for the 'product' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nichoshop.model.dto.AuctionDto.Builder setProductBuilder(com.nichoshop.model.dto.ProductDto.Builder value) {
      clearProduct();
      productBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'product' field has an active Builder instance
     * @return True if the 'product' field has an active Builder instance
     */
    public boolean hasProductBuilder() {
      return productBuilder != null;
    }

    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder clearProduct() {
      product = null;
      productBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentPrice' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.RichMoneyDto getCurrentPrice() {
      return currentPrice;
    }


    /**
      * Sets the value of the 'currentPrice' field.
      * @param value The value of 'currentPrice'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder setCurrentPrice(com.nichoshop.model.dto.RichMoneyDto value) {
      validate(fields()[2], value);
      this.currentPriceBuilder = null;
      this.currentPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currentPrice' field has been set.
      * @return True if the 'currentPrice' field has been set, false otherwise.
      */
    public boolean hasCurrentPrice() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'currentPrice' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.nichoshop.model.dto.RichMoneyDto.Builder getCurrentPriceBuilder() {
      if (currentPriceBuilder == null) {
        if (hasCurrentPrice()) {
          setCurrentPriceBuilder(com.nichoshop.model.dto.RichMoneyDto.newBuilder(currentPrice));
        } else {
          setCurrentPriceBuilder(com.nichoshop.model.dto.RichMoneyDto.newBuilder());
        }
      }
      return currentPriceBuilder;
    }

    /**
     * Sets the Builder instance for the 'currentPrice' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nichoshop.model.dto.AuctionDto.Builder setCurrentPriceBuilder(com.nichoshop.model.dto.RichMoneyDto.Builder value) {
      clearCurrentPrice();
      currentPriceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currentPrice' field has an active Builder instance
     * @return True if the 'currentPrice' field has an active Builder instance
     */
    public boolean hasCurrentPriceBuilder() {
      return currentPriceBuilder != null;
    }

    /**
      * Clears the value of the 'currentPrice' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder clearCurrentPrice() {
      currentPrice = null;
      currentPriceBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'winner' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.AuctionAttendieDto getWinner() {
      return winner;
    }


    /**
      * Sets the value of the 'winner' field.
      * @param value The value of 'winner'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder setWinner(com.nichoshop.model.dto.AuctionAttendieDto value) {
      validate(fields()[3], value);
      this.winnerBuilder = null;
      this.winner = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'winner' field has been set.
      * @return True if the 'winner' field has been set, false otherwise.
      */
    public boolean hasWinner() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'winner' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.nichoshop.model.dto.AuctionAttendieDto.Builder getWinnerBuilder() {
      if (winnerBuilder == null) {
        if (hasWinner()) {
          setWinnerBuilder(com.nichoshop.model.dto.AuctionAttendieDto.newBuilder(winner));
        } else {
          setWinnerBuilder(com.nichoshop.model.dto.AuctionAttendieDto.newBuilder());
        }
      }
      return winnerBuilder;
    }

    /**
     * Sets the Builder instance for the 'winner' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nichoshop.model.dto.AuctionDto.Builder setWinnerBuilder(com.nichoshop.model.dto.AuctionAttendieDto.Builder value) {
      clearWinner();
      winnerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'winner' field has an active Builder instance
     * @return True if the 'winner' field has an active Builder instance
     */
    public boolean hasWinnerBuilder() {
      return winnerBuilder != null;
    }

    /**
      * Clears the value of the 'winner' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder clearWinner() {
      winner = null;
      winnerBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'startAt' field.
      * @return The value.
      */
    public long getStartAt() {
      return startAt;
    }


    /**
      * Sets the value of the 'startAt' field.
      * @param value The value of 'startAt'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder setStartAt(long value) {
      validate(fields()[4], value);
      this.startAt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'startAt' field has been set.
      * @return True if the 'startAt' field has been set, false otherwise.
      */
    public boolean hasStartAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'startAt' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder clearStartAt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'finishAt' field.
      * @return The value.
      */
    public long getFinishAt() {
      return finishAt;
    }


    /**
      * Sets the value of the 'finishAt' field.
      * @param value The value of 'finishAt'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder setFinishAt(long value) {
      validate(fields()[5], value);
      this.finishAt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'finishAt' field has been set.
      * @return True if the 'finishAt' field has been set, false otherwise.
      */
    public boolean hasFinishAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'finishAt' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder clearFinishAt() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'attendies' field.
      * @return The value.
      */
    public java.util.List<com.nichoshop.model.dto.AuctionAttendieDto> getAttendies() {
      return attendies;
    }


    /**
      * Sets the value of the 'attendies' field.
      * @param value The value of 'attendies'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder setAttendies(java.util.List<com.nichoshop.model.dto.AuctionAttendieDto> value) {
      validate(fields()[6], value);
      this.attendies = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'attendies' field has been set.
      * @return True if the 'attendies' field has been set, false otherwise.
      */
    public boolean hasAttendies() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'attendies' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.AuctionDto.Builder clearAttendies() {
      attendies = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuctionDto build() {
      try {
        AuctionDto record = new AuctionDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        if (productBuilder != null) {
          try {
            record.product = this.productBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("product"));
            throw e;
          }
        } else {
          record.product = fieldSetFlags()[1] ? this.product : (com.nichoshop.model.dto.ProductDto) defaultValue(fields()[1]);
        }
        if (currentPriceBuilder != null) {
          try {
            record.currentPrice = this.currentPriceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("currentPrice"));
            throw e;
          }
        } else {
          record.currentPrice = fieldSetFlags()[2] ? this.currentPrice : (com.nichoshop.model.dto.RichMoneyDto) defaultValue(fields()[2]);
        }
        if (winnerBuilder != null) {
          try {
            record.winner = this.winnerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("winner"));
            throw e;
          }
        } else {
          record.winner = fieldSetFlags()[3] ? this.winner : (com.nichoshop.model.dto.AuctionAttendieDto) defaultValue(fields()[3]);
        }
        record.startAt = fieldSetFlags()[4] ? this.startAt : (java.lang.Long) defaultValue(fields()[4]);
        record.finishAt = fieldSetFlags()[5] ? this.finishAt : (java.lang.Long) defaultValue(fields()[5]);
        record.attendies = fieldSetFlags()[6] ? this.attendies : (java.util.List<com.nichoshop.model.dto.AuctionAttendieDto>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuctionDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuctionDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuctionDto>
    READER$ = (org.apache.avro.io.DatumReader<AuctionDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    this.product.customEncode(out);

    this.currentPrice.customEncode(out);

    if (this.winner == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.winner.customEncode(out);
    }

    out.writeLong(this.startAt);

    out.writeLong(this.finishAt);

    if (this.attendies == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.attendies.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.nichoshop.model.dto.AuctionAttendieDto e0: this.attendies) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      if (this.product == null) {
        this.product = new com.nichoshop.model.dto.ProductDto();
      }
      this.product.customDecode(in);

      if (this.currentPrice == null) {
        this.currentPrice = new com.nichoshop.model.dto.RichMoneyDto();
      }
      this.currentPrice.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.winner = null;
      } else {
        if (this.winner == null) {
          this.winner = new com.nichoshop.model.dto.AuctionAttendieDto();
        }
        this.winner.customDecode(in);
      }

      this.startAt = in.readLong();

      this.finishAt = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.attendies = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.nichoshop.model.dto.AuctionAttendieDto> a0 = this.attendies;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.nichoshop.model.dto.AuctionAttendieDto>((int)size0, SCHEMA$.getField("attendies").schema().getTypes().get(1));
          this.attendies = a0;
        } else a0.clear();
        SpecificData.Array<com.nichoshop.model.dto.AuctionAttendieDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.AuctionAttendieDto>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.nichoshop.model.dto.AuctionAttendieDto e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.nichoshop.model.dto.AuctionAttendieDto();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          if (this.product == null) {
            this.product = new com.nichoshop.model.dto.ProductDto();
          }
          this.product.customDecode(in);
          break;

        case 2:
          if (this.currentPrice == null) {
            this.currentPrice = new com.nichoshop.model.dto.RichMoneyDto();
          }
          this.currentPrice.customDecode(in);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.winner = null;
          } else {
            if (this.winner == null) {
              this.winner = new com.nichoshop.model.dto.AuctionAttendieDto();
            }
            this.winner.customDecode(in);
          }
          break;

        case 4:
          this.startAt = in.readLong();
          break;

        case 5:
          this.finishAt = in.readLong();
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.attendies = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.nichoshop.model.dto.AuctionAttendieDto> a0 = this.attendies;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.nichoshop.model.dto.AuctionAttendieDto>((int)size0, SCHEMA$.getField("attendies").schema().getTypes().get(1));
              this.attendies = a0;
            } else a0.clear();
            SpecificData.Array<com.nichoshop.model.dto.AuctionAttendieDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.AuctionAttendieDto>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.nichoshop.model.dto.AuctionAttendieDto e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.nichoshop.model.dto.AuctionAttendieDto();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










