/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductVariantDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -984418189824683319L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductVariantDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"price\",\"type\":{\"type\":\"record\",\"name\":\"RichMoneyDto\",\"fields\":[{\"name\":\"currencyId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"}]}},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"condition\",\"type\":{\"type\":\"enum\",\"name\":\"ProductCondition\",\"symbols\":[\"NEW\",\"USED\"]},\"default\":\"NEW\"},{\"name\":\"offerScopes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferScopeDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"offers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"pricePerItem\",\"type\":\"RichMoneyDto\"},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"accepted\",\"type\":\"boolean\",\"default\":false},{\"name\":\"rejected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProductVariantDto> ENCODER =
      new BinaryMessageEncoder<ProductVariantDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductVariantDto> DECODER =
      new BinaryMessageDecoder<ProductVariantDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductVariantDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductVariantDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductVariantDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProductVariantDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductVariantDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductVariantDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductVariantDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductVariantDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Integer id;
   private java.lang.String title;
   private java.lang.String description;
   private long created;
   private com.nichoshop.model.dto.RichMoneyDto price;
   private int amount;
   private com.nichoshop.model.dto.ProductCondition condition;
   private java.util.List<com.nichoshop.model.dto.OfferScopeDto> offerScopes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductVariantDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param title The new value for title
   * @param description The new value for description
   * @param created The new value for created
   * @param price The new value for price
   * @param amount The new value for amount
   * @param condition The new value for condition
   * @param offerScopes The new value for offerScopes
   */
  public ProductVariantDto(java.lang.Integer id, java.lang.String title, java.lang.String description, java.lang.Long created, com.nichoshop.model.dto.RichMoneyDto price, java.lang.Integer amount, com.nichoshop.model.dto.ProductCondition condition, java.util.List<com.nichoshop.model.dto.OfferScopeDto> offerScopes) {
    this.id = id;
    this.title = title;
    this.description = description;
    this.created = created;
    this.price = price;
    this.amount = amount;
    this.condition = condition;
    this.offerScopes = offerScopes;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return title;
    case 2: return description;
    case 3: return created;
    case 4: return price;
    case 5: return amount;
    case 6: return condition;
    case 7: return offerScopes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: title = value$ != null ? value$.toString() : null; break;
    case 2: description = value$ != null ? value$.toString() : null; break;
    case 3: created = (java.lang.Long)value$; break;
    case 4: price = (com.nichoshop.model.dto.RichMoneyDto)value$; break;
    case 5: amount = (java.lang.Integer)value$; break;
    case 6: condition = (com.nichoshop.model.dto.ProductCondition)value$; break;
    case 7: offerScopes = (java.util.List<com.nichoshop.model.dto.OfferScopeDto>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }



  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }



  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }



  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public long getCreated() {
    return created;
  }



  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public com.nichoshop.model.dto.RichMoneyDto getPrice() {
    return price;
  }



  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public int getAmount() {
    return amount;
  }



  /**
   * Gets the value of the 'condition' field.
   * @return The value of the 'condition' field.
   */
  public com.nichoshop.model.dto.ProductCondition getCondition() {
    return condition;
  }



  /**
   * Gets the value of the 'offerScopes' field.
   * @return The value of the 'offerScopes' field.
   */
  public java.util.List<com.nichoshop.model.dto.OfferScopeDto> getOfferScopes() {
    return offerScopes;
  }



  /**
   * Creates a new ProductVariantDto RecordBuilder.
   * @return A new ProductVariantDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductVariantDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.ProductVariantDto.Builder();
  }

  /**
   * Creates a new ProductVariantDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductVariantDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductVariantDto.Builder newBuilder(com.nichoshop.model.dto.ProductVariantDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.ProductVariantDto.Builder();
    } else {
      return new com.nichoshop.model.dto.ProductVariantDto.Builder(other);
    }
  }

  /**
   * Creates a new ProductVariantDto RecordBuilder by copying an existing ProductVariantDto instance.
   * @param other The existing instance to copy.
   * @return A new ProductVariantDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductVariantDto.Builder newBuilder(com.nichoshop.model.dto.ProductVariantDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.ProductVariantDto.Builder();
    } else {
      return new com.nichoshop.model.dto.ProductVariantDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductVariantDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductVariantDto>
    implements org.apache.avro.data.RecordBuilder<ProductVariantDto> {

    private java.lang.Integer id;
    private java.lang.String title;
    private java.lang.String description;
    private long created;
    private com.nichoshop.model.dto.RichMoneyDto price;
    private com.nichoshop.model.dto.RichMoneyDto.Builder priceBuilder;
    private int amount;
    private com.nichoshop.model.dto.ProductCondition condition;
    private java.util.List<com.nichoshop.model.dto.OfferScopeDto> offerScopes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.ProductVariantDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.created)) {
        this.created = data().deepCopy(fields()[3].schema(), other.created);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasPriceBuilder()) {
        this.priceBuilder = com.nichoshop.model.dto.RichMoneyDto.newBuilder(other.getPriceBuilder());
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.condition)) {
        this.condition = data().deepCopy(fields()[6].schema(), other.condition);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.offerScopes)) {
        this.offerScopes = data().deepCopy(fields()[7].schema(), other.offerScopes);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductVariantDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.ProductVariantDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.created)) {
        this.created = data().deepCopy(fields()[3].schema(), other.created);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      this.priceBuilder = null;
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.condition)) {
        this.condition = data().deepCopy(fields()[6].schema(), other.condition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.offerScopes)) {
        this.offerScopes = data().deepCopy(fields()[7].schema(), other.offerScopes);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder setTitle(java.lang.String value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public long getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder setCreated(long value) {
      validate(fields()[3], value);
      this.created = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder clearCreated() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.RichMoneyDto getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder setPrice(com.nichoshop.model.dto.RichMoneyDto value) {
      validate(fields()[4], value);
      this.priceBuilder = null;
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'price' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.nichoshop.model.dto.RichMoneyDto.Builder getPriceBuilder() {
      if (priceBuilder == null) {
        if (hasPrice()) {
          setPriceBuilder(com.nichoshop.model.dto.RichMoneyDto.newBuilder(price));
        } else {
          setPriceBuilder(com.nichoshop.model.dto.RichMoneyDto.newBuilder());
        }
      }
      return priceBuilder;
    }

    /**
     * Sets the Builder instance for the 'price' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nichoshop.model.dto.ProductVariantDto.Builder setPriceBuilder(com.nichoshop.model.dto.RichMoneyDto.Builder value) {
      clearPrice();
      priceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'price' field has an active Builder instance
     * @return True if the 'price' field has an active Builder instance
     */
    public boolean hasPriceBuilder() {
      return priceBuilder != null;
    }

    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder clearPrice() {
      price = null;
      priceBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public int getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder setAmount(int value) {
      validate(fields()[5], value);
      this.amount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder clearAmount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'condition' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.ProductCondition getCondition() {
      return condition;
    }


    /**
      * Sets the value of the 'condition' field.
      * @param value The value of 'condition'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder setCondition(com.nichoshop.model.dto.ProductCondition value) {
      validate(fields()[6], value);
      this.condition = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'condition' field has been set.
      * @return True if the 'condition' field has been set, false otherwise.
      */
    public boolean hasCondition() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'condition' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder clearCondition() {
      condition = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerScopes' field.
      * @return The value.
      */
    public java.util.List<com.nichoshop.model.dto.OfferScopeDto> getOfferScopes() {
      return offerScopes;
    }


    /**
      * Sets the value of the 'offerScopes' field.
      * @param value The value of 'offerScopes'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder setOfferScopes(java.util.List<com.nichoshop.model.dto.OfferScopeDto> value) {
      validate(fields()[7], value);
      this.offerScopes = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'offerScopes' field has been set.
      * @return True if the 'offerScopes' field has been set, false otherwise.
      */
    public boolean hasOfferScopes() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'offerScopes' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductVariantDto.Builder clearOfferScopes() {
      offerScopes = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductVariantDto build() {
      try {
        ProductVariantDto record = new ProductVariantDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.created = fieldSetFlags()[3] ? this.created : (java.lang.Long) defaultValue(fields()[3]);
        if (priceBuilder != null) {
          try {
            record.price = this.priceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("price"));
            throw e;
          }
        } else {
          record.price = fieldSetFlags()[4] ? this.price : (com.nichoshop.model.dto.RichMoneyDto) defaultValue(fields()[4]);
        }
        record.amount = fieldSetFlags()[5] ? this.amount : (java.lang.Integer) defaultValue(fields()[5]);
        record.condition = fieldSetFlags()[6] ? this.condition : (com.nichoshop.model.dto.ProductCondition) defaultValue(fields()[6]);
        record.offerScopes = fieldSetFlags()[7] ? this.offerScopes : (java.util.List<com.nichoshop.model.dto.OfferScopeDto>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductVariantDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductVariantDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductVariantDto>
    READER$ = (org.apache.avro.io.DatumReader<ProductVariantDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.id);
    }

    out.writeString(this.title);

    out.writeString(this.description);

    out.writeLong(this.created);

    this.price.customEncode(out);

    out.writeInt(this.amount);

    out.writeEnum(this.condition.ordinal());

    if (this.offerScopes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.offerScopes.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.nichoshop.model.dto.OfferScopeDto e0: this.offerScopes) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readInt();
      }

      this.title = in.readString();

      this.description = in.readString();

      this.created = in.readLong();

      if (this.price == null) {
        this.price = new com.nichoshop.model.dto.RichMoneyDto();
      }
      this.price.customDecode(in);

      this.amount = in.readInt();

      this.condition = com.nichoshop.model.dto.ProductCondition.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.offerScopes = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.nichoshop.model.dto.OfferScopeDto> a0 = this.offerScopes;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.nichoshop.model.dto.OfferScopeDto>((int)size0, SCHEMA$.getField("offerScopes").schema().getTypes().get(1));
          this.offerScopes = a0;
        } else a0.clear();
        SpecificData.Array<com.nichoshop.model.dto.OfferScopeDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.OfferScopeDto>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.nichoshop.model.dto.OfferScopeDto e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.nichoshop.model.dto.OfferScopeDto();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readInt();
          }
          break;

        case 1:
          this.title = in.readString();
          break;

        case 2:
          this.description = in.readString();
          break;

        case 3:
          this.created = in.readLong();
          break;

        case 4:
          if (this.price == null) {
            this.price = new com.nichoshop.model.dto.RichMoneyDto();
          }
          this.price.customDecode(in);
          break;

        case 5:
          this.amount = in.readInt();
          break;

        case 6:
          this.condition = com.nichoshop.model.dto.ProductCondition.values()[in.readEnum()];
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.offerScopes = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.nichoshop.model.dto.OfferScopeDto> a0 = this.offerScopes;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.nichoshop.model.dto.OfferScopeDto>((int)size0, SCHEMA$.getField("offerScopes").schema().getTypes().get(1));
              this.offerScopes = a0;
            } else a0.clear();
            SpecificData.Array<com.nichoshop.model.dto.OfferScopeDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.OfferScopeDto>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.nichoshop.model.dto.OfferScopeDto e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.nichoshop.model.dto.OfferScopeDto();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










