/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductAttributeDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6015759264282185519L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductAttributeDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"categoryId\",\"type\":\"int\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valueType\",\"type\":{\"type\":\"enum\",\"name\":\"ProductAttributeType\",\"symbols\":[\"STRING\",\"INTEGER\",\"UNSIGNED_INTEGER0\",\"UNSIGNED_INTEGER1\",\"ENUM\"]},\"default\":\"STRING\"},{\"name\":\"valueOptions\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ProductAttributeOptionsDto\",\"fields\":[{\"name\":\"options\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}],\"default\":null},{\"name\":\"defaultValue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isMultivariation\",\"type\":\"boolean\",\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProductAttributeDto> ENCODER =
      new BinaryMessageEncoder<ProductAttributeDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductAttributeDto> DECODER =
      new BinaryMessageDecoder<ProductAttributeDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductAttributeDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductAttributeDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductAttributeDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProductAttributeDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductAttributeDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductAttributeDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductAttributeDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductAttributeDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int id;
   private int categoryId;
   private java.lang.String name;
   private com.nichoshop.model.dto.ProductAttributeType valueType;
   private com.nichoshop.model.dto.ProductAttributeOptionsDto valueOptions;
   private java.lang.String defaultValue;
   private boolean isMultivariation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductAttributeDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param categoryId The new value for categoryId
   * @param name The new value for name
   * @param valueType The new value for valueType
   * @param valueOptions The new value for valueOptions
   * @param defaultValue The new value for defaultValue
   * @param isMultivariation The new value for isMultivariation
   */
  public ProductAttributeDto(java.lang.Integer id, java.lang.Integer categoryId, java.lang.String name, com.nichoshop.model.dto.ProductAttributeType valueType, com.nichoshop.model.dto.ProductAttributeOptionsDto valueOptions, java.lang.String defaultValue, java.lang.Boolean isMultivariation) {
    this.id = id;
    this.categoryId = categoryId;
    this.name = name;
    this.valueType = valueType;
    this.valueOptions = valueOptions;
    this.defaultValue = defaultValue;
    this.isMultivariation = isMultivariation;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return categoryId;
    case 2: return name;
    case 3: return valueType;
    case 4: return valueOptions;
    case 5: return defaultValue;
    case 6: return isMultivariation;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: categoryId = (java.lang.Integer)value$; break;
    case 2: name = value$ != null ? value$.toString() : null; break;
    case 3: valueType = (com.nichoshop.model.dto.ProductAttributeType)value$; break;
    case 4: valueOptions = (com.nichoshop.model.dto.ProductAttributeOptionsDto)value$; break;
    case 5: defaultValue = value$ != null ? value$.toString() : null; break;
    case 6: isMultivariation = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }



  /**
   * Gets the value of the 'categoryId' field.
   * @return The value of the 'categoryId' field.
   */
  public int getCategoryId() {
    return categoryId;
  }



  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }



  /**
   * Gets the value of the 'valueType' field.
   * @return The value of the 'valueType' field.
   */
  public com.nichoshop.model.dto.ProductAttributeType getValueType() {
    return valueType;
  }



  /**
   * Gets the value of the 'valueOptions' field.
   * @return The value of the 'valueOptions' field.
   */
  public com.nichoshop.model.dto.ProductAttributeOptionsDto getValueOptions() {
    return valueOptions;
  }



  /**
   * Gets the value of the 'defaultValue' field.
   * @return The value of the 'defaultValue' field.
   */
  public java.lang.String getDefaultValue() {
    return defaultValue;
  }



  /**
   * Gets the value of the 'isMultivariation' field.
   * @return The value of the 'isMultivariation' field.
   */
  public boolean getIsMultivariation() {
    return isMultivariation;
  }



  /**
   * Creates a new ProductAttributeDto RecordBuilder.
   * @return A new ProductAttributeDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductAttributeDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.ProductAttributeDto.Builder();
  }

  /**
   * Creates a new ProductAttributeDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductAttributeDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductAttributeDto.Builder newBuilder(com.nichoshop.model.dto.ProductAttributeDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.ProductAttributeDto.Builder();
    } else {
      return new com.nichoshop.model.dto.ProductAttributeDto.Builder(other);
    }
  }

  /**
   * Creates a new ProductAttributeDto RecordBuilder by copying an existing ProductAttributeDto instance.
   * @param other The existing instance to copy.
   * @return A new ProductAttributeDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductAttributeDto.Builder newBuilder(com.nichoshop.model.dto.ProductAttributeDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.ProductAttributeDto.Builder();
    } else {
      return new com.nichoshop.model.dto.ProductAttributeDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductAttributeDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductAttributeDto>
    implements org.apache.avro.data.RecordBuilder<ProductAttributeDto> {

    private int id;
    private int categoryId;
    private java.lang.String name;
    private com.nichoshop.model.dto.ProductAttributeType valueType;
    private com.nichoshop.model.dto.ProductAttributeOptionsDto valueOptions;
    private com.nichoshop.model.dto.ProductAttributeOptionsDto.Builder valueOptionsBuilder;
    private java.lang.String defaultValue;
    private boolean isMultivariation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.ProductAttributeDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.categoryId)) {
        this.categoryId = data().deepCopy(fields()[1].schema(), other.categoryId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.valueType)) {
        this.valueType = data().deepCopy(fields()[3].schema(), other.valueType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.valueOptions)) {
        this.valueOptions = data().deepCopy(fields()[4].schema(), other.valueOptions);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasValueOptionsBuilder()) {
        this.valueOptionsBuilder = com.nichoshop.model.dto.ProductAttributeOptionsDto.newBuilder(other.getValueOptionsBuilder());
      }
      if (isValidValue(fields()[5], other.defaultValue)) {
        this.defaultValue = data().deepCopy(fields()[5].schema(), other.defaultValue);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.isMultivariation)) {
        this.isMultivariation = data().deepCopy(fields()[6].schema(), other.isMultivariation);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductAttributeDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.ProductAttributeDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.categoryId)) {
        this.categoryId = data().deepCopy(fields()[1].schema(), other.categoryId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.valueType)) {
        this.valueType = data().deepCopy(fields()[3].schema(), other.valueType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.valueOptions)) {
        this.valueOptions = data().deepCopy(fields()[4].schema(), other.valueOptions);
        fieldSetFlags()[4] = true;
      }
      this.valueOptionsBuilder = null;
      if (isValidValue(fields()[5], other.defaultValue)) {
        this.defaultValue = data().deepCopy(fields()[5].schema(), other.defaultValue);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isMultivariation)) {
        this.isMultivariation = data().deepCopy(fields()[6].schema(), other.isMultivariation);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'categoryId' field.
      * @return The value.
      */
    public int getCategoryId() {
      return categoryId;
    }


    /**
      * Sets the value of the 'categoryId' field.
      * @param value The value of 'categoryId'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder setCategoryId(int value) {
      validate(fields()[1], value);
      this.categoryId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'categoryId' field has been set.
      * @return True if the 'categoryId' field has been set, false otherwise.
      */
    public boolean hasCategoryId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'categoryId' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder clearCategoryId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueType' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.ProductAttributeType getValueType() {
      return valueType;
    }


    /**
      * Sets the value of the 'valueType' field.
      * @param value The value of 'valueType'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder setValueType(com.nichoshop.model.dto.ProductAttributeType value) {
      validate(fields()[3], value);
      this.valueType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'valueType' field has been set.
      * @return True if the 'valueType' field has been set, false otherwise.
      */
    public boolean hasValueType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'valueType' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder clearValueType() {
      valueType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueOptions' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.ProductAttributeOptionsDto getValueOptions() {
      return valueOptions;
    }


    /**
      * Sets the value of the 'valueOptions' field.
      * @param value The value of 'valueOptions'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder setValueOptions(com.nichoshop.model.dto.ProductAttributeOptionsDto value) {
      validate(fields()[4], value);
      this.valueOptionsBuilder = null;
      this.valueOptions = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'valueOptions' field has been set.
      * @return True if the 'valueOptions' field has been set, false otherwise.
      */
    public boolean hasValueOptions() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'valueOptions' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.nichoshop.model.dto.ProductAttributeOptionsDto.Builder getValueOptionsBuilder() {
      if (valueOptionsBuilder == null) {
        if (hasValueOptions()) {
          setValueOptionsBuilder(com.nichoshop.model.dto.ProductAttributeOptionsDto.newBuilder(valueOptions));
        } else {
          setValueOptionsBuilder(com.nichoshop.model.dto.ProductAttributeOptionsDto.newBuilder());
        }
      }
      return valueOptionsBuilder;
    }

    /**
     * Sets the Builder instance for the 'valueOptions' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nichoshop.model.dto.ProductAttributeDto.Builder setValueOptionsBuilder(com.nichoshop.model.dto.ProductAttributeOptionsDto.Builder value) {
      clearValueOptions();
      valueOptionsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'valueOptions' field has an active Builder instance
     * @return True if the 'valueOptions' field has an active Builder instance
     */
    public boolean hasValueOptionsBuilder() {
      return valueOptionsBuilder != null;
    }

    /**
      * Clears the value of the 'valueOptions' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder clearValueOptions() {
      valueOptions = null;
      valueOptionsBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'defaultValue' field.
      * @return The value.
      */
    public java.lang.String getDefaultValue() {
      return defaultValue;
    }


    /**
      * Sets the value of the 'defaultValue' field.
      * @param value The value of 'defaultValue'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder setDefaultValue(java.lang.String value) {
      validate(fields()[5], value);
      this.defaultValue = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'defaultValue' field has been set.
      * @return True if the 'defaultValue' field has been set, false otherwise.
      */
    public boolean hasDefaultValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'defaultValue' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder clearDefaultValue() {
      defaultValue = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isMultivariation' field.
      * @return The value.
      */
    public boolean getIsMultivariation() {
      return isMultivariation;
    }


    /**
      * Sets the value of the 'isMultivariation' field.
      * @param value The value of 'isMultivariation'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder setIsMultivariation(boolean value) {
      validate(fields()[6], value);
      this.isMultivariation = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isMultivariation' field has been set.
      * @return True if the 'isMultivariation' field has been set, false otherwise.
      */
    public boolean hasIsMultivariation() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isMultivariation' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductAttributeDto.Builder clearIsMultivariation() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductAttributeDto build() {
      try {
        ProductAttributeDto record = new ProductAttributeDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.categoryId = fieldSetFlags()[1] ? this.categoryId : (java.lang.Integer) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.valueType = fieldSetFlags()[3] ? this.valueType : (com.nichoshop.model.dto.ProductAttributeType) defaultValue(fields()[3]);
        if (valueOptionsBuilder != null) {
          try {
            record.valueOptions = this.valueOptionsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("valueOptions"));
            throw e;
          }
        } else {
          record.valueOptions = fieldSetFlags()[4] ? this.valueOptions : (com.nichoshop.model.dto.ProductAttributeOptionsDto) defaultValue(fields()[4]);
        }
        record.defaultValue = fieldSetFlags()[5] ? this.defaultValue : (java.lang.String) defaultValue(fields()[5]);
        record.isMultivariation = fieldSetFlags()[6] ? this.isMultivariation : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductAttributeDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductAttributeDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductAttributeDto>
    READER$ = (org.apache.avro.io.DatumReader<ProductAttributeDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeInt(this.categoryId);

    out.writeString(this.name);

    out.writeEnum(this.valueType.ordinal());

    if (this.valueOptions == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.valueOptions.customEncode(out);
    }

    if (this.defaultValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.defaultValue);
    }

    out.writeBoolean(this.isMultivariation);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.categoryId = in.readInt();

      this.name = in.readString();

      this.valueType = com.nichoshop.model.dto.ProductAttributeType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.valueOptions = null;
      } else {
        if (this.valueOptions == null) {
          this.valueOptions = new com.nichoshop.model.dto.ProductAttributeOptionsDto();
        }
        this.valueOptions.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.defaultValue = null;
      } else {
        this.defaultValue = in.readString();
      }

      this.isMultivariation = in.readBoolean();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.categoryId = in.readInt();
          break;

        case 2:
          this.name = in.readString();
          break;

        case 3:
          this.valueType = com.nichoshop.model.dto.ProductAttributeType.values()[in.readEnum()];
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.valueOptions = null;
          } else {
            if (this.valueOptions == null) {
              this.valueOptions = new com.nichoshop.model.dto.ProductAttributeOptionsDto();
            }
            this.valueOptions.customDecode(in);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.defaultValue = null;
          } else {
            this.defaultValue = in.readString();
          }
          break;

        case 6:
          this.isMultivariation = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










