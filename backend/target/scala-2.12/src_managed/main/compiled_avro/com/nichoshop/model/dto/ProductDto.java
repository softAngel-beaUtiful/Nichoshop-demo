/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4614566229249473885L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"categoryId\",\"type\":\"int\"},{\"name\":\"sellerId\",\"type\":\"int\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"variants\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProductVariantDto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"price\",\"type\":{\"type\":\"record\",\"name\":\"RichMoneyDto\",\"fields\":[{\"name\":\"currencyId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"}]}},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"condition\",\"type\":{\"type\":\"enum\",\"name\":\"ProductCondition\",\"symbols\":[\"NEW\",\"USED\"]},\"default\":\"NEW\"},{\"name\":\"offerScopes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferScopeDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"offers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"pricePerItem\",\"type\":\"RichMoneyDto\"},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"accepted\",\"type\":\"boolean\",\"default\":false},{\"name\":\"rejected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null}]}}],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProductDto> ENCODER =
      new BinaryMessageEncoder<ProductDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductDto> DECODER =
      new BinaryMessageDecoder<ProductDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProductDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Integer id;
   private int categoryId;
   private int sellerId;
   private java.lang.String title;
   private java.lang.String description;
   private long created;
   private java.util.List<com.nichoshop.model.dto.ProductVariantDto> variants;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param categoryId The new value for categoryId
   * @param sellerId The new value for sellerId
   * @param title The new value for title
   * @param description The new value for description
   * @param created The new value for created
   * @param variants The new value for variants
   */
  public ProductDto(java.lang.Integer id, java.lang.Integer categoryId, java.lang.Integer sellerId, java.lang.String title, java.lang.String description, java.lang.Long created, java.util.List<com.nichoshop.model.dto.ProductVariantDto> variants) {
    this.id = id;
    this.categoryId = categoryId;
    this.sellerId = sellerId;
    this.title = title;
    this.description = description;
    this.created = created;
    this.variants = variants;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return categoryId;
    case 2: return sellerId;
    case 3: return title;
    case 4: return description;
    case 5: return created;
    case 6: return variants;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: categoryId = (java.lang.Integer)value$; break;
    case 2: sellerId = (java.lang.Integer)value$; break;
    case 3: title = value$ != null ? value$.toString() : null; break;
    case 4: description = value$ != null ? value$.toString() : null; break;
    case 5: created = (java.lang.Long)value$; break;
    case 6: variants = (java.util.List<com.nichoshop.model.dto.ProductVariantDto>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }



  /**
   * Gets the value of the 'categoryId' field.
   * @return The value of the 'categoryId' field.
   */
  public int getCategoryId() {
    return categoryId;
  }



  /**
   * Gets the value of the 'sellerId' field.
   * @return The value of the 'sellerId' field.
   */
  public int getSellerId() {
    return sellerId;
  }



  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }



  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }



  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public long getCreated() {
    return created;
  }



  /**
   * Gets the value of the 'variants' field.
   * @return The value of the 'variants' field.
   */
  public java.util.List<com.nichoshop.model.dto.ProductVariantDto> getVariants() {
    return variants;
  }



  /**
   * Creates a new ProductDto RecordBuilder.
   * @return A new ProductDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.ProductDto.Builder();
  }

  /**
   * Creates a new ProductDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductDto.Builder newBuilder(com.nichoshop.model.dto.ProductDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.ProductDto.Builder();
    } else {
      return new com.nichoshop.model.dto.ProductDto.Builder(other);
    }
  }

  /**
   * Creates a new ProductDto RecordBuilder by copying an existing ProductDto instance.
   * @param other The existing instance to copy.
   * @return A new ProductDto RecordBuilder
   */
  public static com.nichoshop.model.dto.ProductDto.Builder newBuilder(com.nichoshop.model.dto.ProductDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.ProductDto.Builder();
    } else {
      return new com.nichoshop.model.dto.ProductDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductDto>
    implements org.apache.avro.data.RecordBuilder<ProductDto> {

    private java.lang.Integer id;
    private int categoryId;
    private int sellerId;
    private java.lang.String title;
    private java.lang.String description;
    private long created;
    private java.util.List<com.nichoshop.model.dto.ProductVariantDto> variants;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.ProductDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.categoryId)) {
        this.categoryId = data().deepCopy(fields()[1].schema(), other.categoryId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sellerId)) {
        this.sellerId = data().deepCopy(fields()[2].schema(), other.sellerId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.title)) {
        this.title = data().deepCopy(fields()[3].schema(), other.title);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.created)) {
        this.created = data().deepCopy(fields()[5].schema(), other.created);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.variants)) {
        this.variants = data().deepCopy(fields()[6].schema(), other.variants);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.ProductDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.categoryId)) {
        this.categoryId = data().deepCopy(fields()[1].schema(), other.categoryId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sellerId)) {
        this.sellerId = data().deepCopy(fields()[2].schema(), other.sellerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.title)) {
        this.title = data().deepCopy(fields()[3].schema(), other.title);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.created)) {
        this.created = data().deepCopy(fields()[5].schema(), other.created);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.variants)) {
        this.variants = data().deepCopy(fields()[6].schema(), other.variants);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'categoryId' field.
      * @return The value.
      */
    public int getCategoryId() {
      return categoryId;
    }


    /**
      * Sets the value of the 'categoryId' field.
      * @param value The value of 'categoryId'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder setCategoryId(int value) {
      validate(fields()[1], value);
      this.categoryId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'categoryId' field has been set.
      * @return True if the 'categoryId' field has been set, false otherwise.
      */
    public boolean hasCategoryId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'categoryId' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder clearCategoryId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellerId' field.
      * @return The value.
      */
    public int getSellerId() {
      return sellerId;
    }


    /**
      * Sets the value of the 'sellerId' field.
      * @param value The value of 'sellerId'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder setSellerId(int value) {
      validate(fields()[2], value);
      this.sellerId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sellerId' field has been set.
      * @return True if the 'sellerId' field has been set, false otherwise.
      */
    public boolean hasSellerId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sellerId' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder clearSellerId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder setTitle(java.lang.String value) {
      validate(fields()[3], value);
      this.title = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder clearTitle() {
      title = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder setDescription(java.lang.String value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public long getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder setCreated(long value) {
      validate(fields()[5], value);
      this.created = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder clearCreated() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'variants' field.
      * @return The value.
      */
    public java.util.List<com.nichoshop.model.dto.ProductVariantDto> getVariants() {
      return variants;
    }


    /**
      * Sets the value of the 'variants' field.
      * @param value The value of 'variants'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder setVariants(java.util.List<com.nichoshop.model.dto.ProductVariantDto> value) {
      validate(fields()[6], value);
      this.variants = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'variants' field has been set.
      * @return True if the 'variants' field has been set, false otherwise.
      */
    public boolean hasVariants() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'variants' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.ProductDto.Builder clearVariants() {
      variants = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductDto build() {
      try {
        ProductDto record = new ProductDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.categoryId = fieldSetFlags()[1] ? this.categoryId : (java.lang.Integer) defaultValue(fields()[1]);
        record.sellerId = fieldSetFlags()[2] ? this.sellerId : (java.lang.Integer) defaultValue(fields()[2]);
        record.title = fieldSetFlags()[3] ? this.title : (java.lang.String) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.String) defaultValue(fields()[4]);
        record.created = fieldSetFlags()[5] ? this.created : (java.lang.Long) defaultValue(fields()[5]);
        record.variants = fieldSetFlags()[6] ? this.variants : (java.util.List<com.nichoshop.model.dto.ProductVariantDto>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductDto>
    READER$ = (org.apache.avro.io.DatumReader<ProductDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.id);
    }

    out.writeInt(this.categoryId);

    out.writeInt(this.sellerId);

    out.writeString(this.title);

    out.writeString(this.description);

    out.writeLong(this.created);

    long size0 = this.variants.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.nichoshop.model.dto.ProductVariantDto e0: this.variants) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readInt();
      }

      this.categoryId = in.readInt();

      this.sellerId = in.readInt();

      this.title = in.readString();

      this.description = in.readString();

      this.created = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<com.nichoshop.model.dto.ProductVariantDto> a0 = this.variants;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.nichoshop.model.dto.ProductVariantDto>((int)size0, SCHEMA$.getField("variants").schema());
        this.variants = a0;
      } else a0.clear();
      SpecificData.Array<com.nichoshop.model.dto.ProductVariantDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.ProductVariantDto>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.nichoshop.model.dto.ProductVariantDto e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.nichoshop.model.dto.ProductVariantDto();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readInt();
          }
          break;

        case 1:
          this.categoryId = in.readInt();
          break;

        case 2:
          this.sellerId = in.readInt();
          break;

        case 3:
          this.title = in.readString();
          break;

        case 4:
          this.description = in.readString();
          break;

        case 5:
          this.created = in.readLong();
          break;

        case 6:
          long size0 = in.readArrayStart();
          java.util.List<com.nichoshop.model.dto.ProductVariantDto> a0 = this.variants;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.nichoshop.model.dto.ProductVariantDto>((int)size0, SCHEMA$.getField("variants").schema());
            this.variants = a0;
          } else a0.clear();
          SpecificData.Array<com.nichoshop.model.dto.ProductVariantDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.ProductVariantDto>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.nichoshop.model.dto.ProductVariantDto e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.nichoshop.model.dto.ProductVariantDto();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










