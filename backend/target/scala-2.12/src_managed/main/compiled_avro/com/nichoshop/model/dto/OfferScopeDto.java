/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OfferScopeDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6722665343253500916L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OfferScopeDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"offers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"pricePerItem\",\"type\":{\"type\":\"record\",\"name\":\"RichMoneyDto\",\"fields\":[{\"name\":\"currencyId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"}]}},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"accepted\",\"type\":\"boolean\",\"default\":false},{\"name\":\"rejected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OfferScopeDto> ENCODER =
      new BinaryMessageEncoder<OfferScopeDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OfferScopeDto> DECODER =
      new BinaryMessageDecoder<OfferScopeDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OfferScopeDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OfferScopeDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OfferScopeDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OfferScopeDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OfferScopeDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OfferScopeDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OfferScopeDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OfferScopeDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int id;
   private long start;
   private java.lang.Long end;
   private java.util.List<com.nichoshop.model.dto.OfferDto> offers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OfferScopeDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param start The new value for start
   * @param end The new value for end
   * @param offers The new value for offers
   */
  public OfferScopeDto(java.lang.Integer id, java.lang.Long start, java.lang.Long end, java.util.List<com.nichoshop.model.dto.OfferDto> offers) {
    this.id = id;
    this.start = start;
    this.end = end;
    this.offers = offers;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return start;
    case 2: return end;
    case 3: return offers;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: start = (java.lang.Long)value$; break;
    case 2: end = (java.lang.Long)value$; break;
    case 3: offers = (java.util.List<com.nichoshop.model.dto.OfferDto>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }



  /**
   * Gets the value of the 'start' field.
   * @return The value of the 'start' field.
   */
  public long getStart() {
    return start;
  }



  /**
   * Gets the value of the 'end' field.
   * @return The value of the 'end' field.
   */
  public java.lang.Long getEnd() {
    return end;
  }



  /**
   * Gets the value of the 'offers' field.
   * @return The value of the 'offers' field.
   */
  public java.util.List<com.nichoshop.model.dto.OfferDto> getOffers() {
    return offers;
  }



  /**
   * Creates a new OfferScopeDto RecordBuilder.
   * @return A new OfferScopeDto RecordBuilder
   */
  public static com.nichoshop.model.dto.OfferScopeDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.OfferScopeDto.Builder();
  }

  /**
   * Creates a new OfferScopeDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OfferScopeDto RecordBuilder
   */
  public static com.nichoshop.model.dto.OfferScopeDto.Builder newBuilder(com.nichoshop.model.dto.OfferScopeDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.OfferScopeDto.Builder();
    } else {
      return new com.nichoshop.model.dto.OfferScopeDto.Builder(other);
    }
  }

  /**
   * Creates a new OfferScopeDto RecordBuilder by copying an existing OfferScopeDto instance.
   * @param other The existing instance to copy.
   * @return A new OfferScopeDto RecordBuilder
   */
  public static com.nichoshop.model.dto.OfferScopeDto.Builder newBuilder(com.nichoshop.model.dto.OfferScopeDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.OfferScopeDto.Builder();
    } else {
      return new com.nichoshop.model.dto.OfferScopeDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for OfferScopeDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OfferScopeDto>
    implements org.apache.avro.data.RecordBuilder<OfferScopeDto> {

    private int id;
    private long start;
    private java.lang.Long end;
    private java.util.List<com.nichoshop.model.dto.OfferDto> offers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.OfferScopeDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.start)) {
        this.start = data().deepCopy(fields()[1].schema(), other.start);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.end)) {
        this.end = data().deepCopy(fields()[2].schema(), other.end);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.offers)) {
        this.offers = data().deepCopy(fields()[3].schema(), other.offers);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing OfferScopeDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.OfferScopeDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.start)) {
        this.start = data().deepCopy(fields()[1].schema(), other.start);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.end)) {
        this.end = data().deepCopy(fields()[2].schema(), other.end);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.offers)) {
        this.offers = data().deepCopy(fields()[3].schema(), other.offers);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferScopeDto.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferScopeDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'start' field.
      * @return The value.
      */
    public long getStart() {
      return start;
    }


    /**
      * Sets the value of the 'start' field.
      * @param value The value of 'start'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferScopeDto.Builder setStart(long value) {
      validate(fields()[1], value);
      this.start = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'start' field has been set.
      * @return True if the 'start' field has been set, false otherwise.
      */
    public boolean hasStart() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'start' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferScopeDto.Builder clearStart() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'end' field.
      * @return The value.
      */
    public java.lang.Long getEnd() {
      return end;
    }


    /**
      * Sets the value of the 'end' field.
      * @param value The value of 'end'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferScopeDto.Builder setEnd(java.lang.Long value) {
      validate(fields()[2], value);
      this.end = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'end' field has been set.
      * @return True if the 'end' field has been set, false otherwise.
      */
    public boolean hasEnd() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'end' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferScopeDto.Builder clearEnd() {
      end = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'offers' field.
      * @return The value.
      */
    public java.util.List<com.nichoshop.model.dto.OfferDto> getOffers() {
      return offers;
    }


    /**
      * Sets the value of the 'offers' field.
      * @param value The value of 'offers'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferScopeDto.Builder setOffers(java.util.List<com.nichoshop.model.dto.OfferDto> value) {
      validate(fields()[3], value);
      this.offers = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'offers' field has been set.
      * @return True if the 'offers' field has been set, false otherwise.
      */
    public boolean hasOffers() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'offers' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.OfferScopeDto.Builder clearOffers() {
      offers = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OfferScopeDto build() {
      try {
        OfferScopeDto record = new OfferScopeDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.start = fieldSetFlags()[1] ? this.start : (java.lang.Long) defaultValue(fields()[1]);
        record.end = fieldSetFlags()[2] ? this.end : (java.lang.Long) defaultValue(fields()[2]);
        record.offers = fieldSetFlags()[3] ? this.offers : (java.util.List<com.nichoshop.model.dto.OfferDto>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OfferScopeDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<OfferScopeDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OfferScopeDto>
    READER$ = (org.apache.avro.io.DatumReader<OfferScopeDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeLong(this.start);

    if (this.end == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.end);
    }

    if (this.offers == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.offers.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.nichoshop.model.dto.OfferDto e0: this.offers) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.start = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.end = null;
      } else {
        this.end = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.offers = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.nichoshop.model.dto.OfferDto> a0 = this.offers;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.nichoshop.model.dto.OfferDto>((int)size0, SCHEMA$.getField("offers").schema().getTypes().get(1));
          this.offers = a0;
        } else a0.clear();
        SpecificData.Array<com.nichoshop.model.dto.OfferDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.OfferDto>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.nichoshop.model.dto.OfferDto e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.nichoshop.model.dto.OfferDto();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.start = in.readLong();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.end = null;
          } else {
            this.end = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.offers = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.nichoshop.model.dto.OfferDto> a0 = this.offers;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.nichoshop.model.dto.OfferDto>((int)size0, SCHEMA$.getField("offers").schema().getTypes().get(1));
              this.offers = a0;
            } else a0.clear();
            SpecificData.Array<com.nichoshop.model.dto.OfferDto> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.nichoshop.model.dto.OfferDto>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.nichoshop.model.dto.OfferDto e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.nichoshop.model.dto.OfferDto();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










