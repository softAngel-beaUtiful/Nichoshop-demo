/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CartItemDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9037819620036335846L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CartItemDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"product\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ProductDto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"categoryId\",\"type\":\"int\"},{\"name\":\"sellerId\",\"type\":\"int\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"variants\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProductVariantDto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"price\",\"type\":{\"type\":\"record\",\"name\":\"RichMoneyDto\",\"fields\":[{\"name\":\"currencyId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"}]}},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"condition\",\"type\":{\"type\":\"enum\",\"name\":\"ProductCondition\",\"symbols\":[\"NEW\",\"USED\"]},\"default\":\"NEW\"},{\"name\":\"offerScopes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferScopeDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"offers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OfferDto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"created\",\"type\":\"long\"},{\"name\":\"pricePerItem\",\"type\":\"RichMoneyDto\"},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"accepted\",\"type\":\"boolean\",\"default\":false},{\"name\":\"rejected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}],\"default\":null}]}}],\"default\":null}]}}}]}],\"default\":null},{\"name\":\"qty\",\"type\":\"int\",\"default\":1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CartItemDto> ENCODER =
      new BinaryMessageEncoder<CartItemDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CartItemDto> DECODER =
      new BinaryMessageDecoder<CartItemDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CartItemDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CartItemDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CartItemDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CartItemDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CartItemDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CartItemDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CartItemDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CartItemDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.nichoshop.model.dto.ProductDto product;
   private int qty;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CartItemDto() {}

  /**
   * All-args constructor.
   * @param product The new value for product
   * @param qty The new value for qty
   */
  public CartItemDto(com.nichoshop.model.dto.ProductDto product, java.lang.Integer qty) {
    this.product = product;
    this.qty = qty;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return product;
    case 1: return qty;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: product = (com.nichoshop.model.dto.ProductDto)value$; break;
    case 1: qty = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public com.nichoshop.model.dto.ProductDto getProduct() {
    return product;
  }



  /**
   * Gets the value of the 'qty' field.
   * @return The value of the 'qty' field.
   */
  public int getQty() {
    return qty;
  }



  /**
   * Creates a new CartItemDto RecordBuilder.
   * @return A new CartItemDto RecordBuilder
   */
  public static com.nichoshop.model.dto.CartItemDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.CartItemDto.Builder();
  }

  /**
   * Creates a new CartItemDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CartItemDto RecordBuilder
   */
  public static com.nichoshop.model.dto.CartItemDto.Builder newBuilder(com.nichoshop.model.dto.CartItemDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.CartItemDto.Builder();
    } else {
      return new com.nichoshop.model.dto.CartItemDto.Builder(other);
    }
  }

  /**
   * Creates a new CartItemDto RecordBuilder by copying an existing CartItemDto instance.
   * @param other The existing instance to copy.
   * @return A new CartItemDto RecordBuilder
   */
  public static com.nichoshop.model.dto.CartItemDto.Builder newBuilder(com.nichoshop.model.dto.CartItemDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.CartItemDto.Builder();
    } else {
      return new com.nichoshop.model.dto.CartItemDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for CartItemDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CartItemDto>
    implements org.apache.avro.data.RecordBuilder<CartItemDto> {

    private com.nichoshop.model.dto.ProductDto product;
    private com.nichoshop.model.dto.ProductDto.Builder productBuilder;
    private int qty;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.CartItemDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasProductBuilder()) {
        this.productBuilder = com.nichoshop.model.dto.ProductDto.newBuilder(other.getProductBuilder());
      }
      if (isValidValue(fields()[1], other.qty)) {
        this.qty = data().deepCopy(fields()[1].schema(), other.qty);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing CartItemDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.CartItemDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      this.productBuilder = null;
      if (isValidValue(fields()[1], other.qty)) {
        this.qty = data().deepCopy(fields()[1].schema(), other.qty);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public com.nichoshop.model.dto.ProductDto getProduct() {
      return product;
    }


    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.CartItemDto.Builder setProduct(com.nichoshop.model.dto.ProductDto value) {
      validate(fields()[0], value);
      this.productBuilder = null;
      this.product = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'product' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.nichoshop.model.dto.ProductDto.Builder getProductBuilder() {
      if (productBuilder == null) {
        if (hasProduct()) {
          setProductBuilder(com.nichoshop.model.dto.ProductDto.newBuilder(product));
        } else {
          setProductBuilder(com.nichoshop.model.dto.ProductDto.newBuilder());
        }
      }
      return productBuilder;
    }

    /**
     * Sets the Builder instance for the 'product' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.nichoshop.model.dto.CartItemDto.Builder setProductBuilder(com.nichoshop.model.dto.ProductDto.Builder value) {
      clearProduct();
      productBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'product' field has an active Builder instance
     * @return True if the 'product' field has an active Builder instance
     */
    public boolean hasProductBuilder() {
      return productBuilder != null;
    }

    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.CartItemDto.Builder clearProduct() {
      product = null;
      productBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'qty' field.
      * @return The value.
      */
    public int getQty() {
      return qty;
    }


    /**
      * Sets the value of the 'qty' field.
      * @param value The value of 'qty'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.CartItemDto.Builder setQty(int value) {
      validate(fields()[1], value);
      this.qty = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'qty' field has been set.
      * @return True if the 'qty' field has been set, false otherwise.
      */
    public boolean hasQty() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'qty' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.CartItemDto.Builder clearQty() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CartItemDto build() {
      try {
        CartItemDto record = new CartItemDto();
        if (productBuilder != null) {
          try {
            record.product = this.productBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("product"));
            throw e;
          }
        } else {
          record.product = fieldSetFlags()[0] ? this.product : (com.nichoshop.model.dto.ProductDto) defaultValue(fields()[0]);
        }
        record.qty = fieldSetFlags()[1] ? this.qty : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CartItemDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<CartItemDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CartItemDto>
    READER$ = (org.apache.avro.io.DatumReader<CartItemDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.product == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.product.customEncode(out);
    }

    out.writeInt(this.qty);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.product = null;
      } else {
        if (this.product == null) {
          this.product = new com.nichoshop.model.dto.ProductDto();
        }
        this.product.customDecode(in);
      }

      this.qty = in.readInt();

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.product = null;
          } else {
            if (this.product == null) {
              this.product = new com.nichoshop.model.dto.ProductDto();
            }
            this.product.customDecode(in);
          }
          break;

        case 1:
          this.qty = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










