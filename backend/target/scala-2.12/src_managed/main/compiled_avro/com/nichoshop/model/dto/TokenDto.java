/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nichoshop.model.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TokenDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6742296707124528084L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TokenDto\",\"namespace\":\"com.nichoshop.model.dto\",\"fields\":[{\"name\":\"hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"hashSession\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"created\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TokenDto> ENCODER =
      new BinaryMessageEncoder<TokenDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TokenDto> DECODER =
      new BinaryMessageDecoder<TokenDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TokenDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TokenDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TokenDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TokenDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TokenDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TokenDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TokenDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TokenDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String hash;
   private java.lang.String hashSession;
   private java.lang.String userid;
   private long timestamp;
   private long created;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TokenDto() {}

  /**
   * All-args constructor.
   * @param hash The new value for hash
   * @param hashSession The new value for hashSession
   * @param userid The new value for userid
   * @param timestamp The new value for timestamp
   * @param created The new value for created
   */
  public TokenDto(java.lang.String hash, java.lang.String hashSession, java.lang.String userid, java.lang.Long timestamp, java.lang.Long created) {
    this.hash = hash;
    this.hashSession = hashSession;
    this.userid = userid;
    this.timestamp = timestamp;
    this.created = created;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hash;
    case 1: return hashSession;
    case 2: return userid;
    case 3: return timestamp;
    case 4: return created;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hash = value$ != null ? value$.toString() : null; break;
    case 1: hashSession = value$ != null ? value$.toString() : null; break;
    case 2: userid = value$ != null ? value$.toString() : null; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: created = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The value of the 'hash' field.
   */
  public java.lang.String getHash() {
    return hash;
  }



  /**
   * Gets the value of the 'hashSession' field.
   * @return The value of the 'hashSession' field.
   */
  public java.lang.String getHashSession() {
    return hashSession;
  }



  /**
   * Gets the value of the 'userid' field.
   * @return The value of the 'userid' field.
   */
  public java.lang.String getUserid() {
    return userid;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public long getCreated() {
    return created;
  }



  /**
   * Creates a new TokenDto RecordBuilder.
   * @return A new TokenDto RecordBuilder
   */
  public static com.nichoshop.model.dto.TokenDto.Builder newBuilder() {
    return new com.nichoshop.model.dto.TokenDto.Builder();
  }

  /**
   * Creates a new TokenDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TokenDto RecordBuilder
   */
  public static com.nichoshop.model.dto.TokenDto.Builder newBuilder(com.nichoshop.model.dto.TokenDto.Builder other) {
    if (other == null) {
      return new com.nichoshop.model.dto.TokenDto.Builder();
    } else {
      return new com.nichoshop.model.dto.TokenDto.Builder(other);
    }
  }

  /**
   * Creates a new TokenDto RecordBuilder by copying an existing TokenDto instance.
   * @param other The existing instance to copy.
   * @return A new TokenDto RecordBuilder
   */
  public static com.nichoshop.model.dto.TokenDto.Builder newBuilder(com.nichoshop.model.dto.TokenDto other) {
    if (other == null) {
      return new com.nichoshop.model.dto.TokenDto.Builder();
    } else {
      return new com.nichoshop.model.dto.TokenDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for TokenDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TokenDto>
    implements org.apache.avro.data.RecordBuilder<TokenDto> {

    private java.lang.String hash;
    private java.lang.String hashSession;
    private java.lang.String userid;
    private long timestamp;
    private long created;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nichoshop.model.dto.TokenDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.hashSession)) {
        this.hashSession = data().deepCopy(fields()[1].schema(), other.hashSession);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userid)) {
        this.userid = data().deepCopy(fields()[2].schema(), other.userid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.created)) {
        this.created = data().deepCopy(fields()[4].schema(), other.created);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TokenDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nichoshop.model.dto.TokenDto other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hashSession)) {
        this.hashSession = data().deepCopy(fields()[1].schema(), other.hashSession);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userid)) {
        this.userid = data().deepCopy(fields()[2].schema(), other.userid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.created)) {
        this.created = data().deepCopy(fields()[4].schema(), other.created);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'hash' field.
      * @return The value.
      */
    public java.lang.String getHash() {
      return hash;
    }


    /**
      * Sets the value of the 'hash' field.
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder setHash(java.lang.String value) {
      validate(fields()[0], value);
      this.hash = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hash' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder clearHash() {
      hash = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hashSession' field.
      * @return The value.
      */
    public java.lang.String getHashSession() {
      return hashSession;
    }


    /**
      * Sets the value of the 'hashSession' field.
      * @param value The value of 'hashSession'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder setHashSession(java.lang.String value) {
      validate(fields()[1], value);
      this.hashSession = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hashSession' field has been set.
      * @return True if the 'hashSession' field has been set, false otherwise.
      */
    public boolean hasHashSession() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hashSession' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder clearHashSession() {
      hashSession = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userid' field.
      * @return The value.
      */
    public java.lang.String getUserid() {
      return userid;
    }


    /**
      * Sets the value of the 'userid' field.
      * @param value The value of 'userid'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder setUserid(java.lang.String value) {
      validate(fields()[2], value);
      this.userid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userid' field has been set.
      * @return True if the 'userid' field has been set, false otherwise.
      */
    public boolean hasUserid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userid' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder clearUserid() {
      userid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public long getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder setCreated(long value) {
      validate(fields()[4], value);
      this.created = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public com.nichoshop.model.dto.TokenDto.Builder clearCreated() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TokenDto build() {
      try {
        TokenDto record = new TokenDto();
        record.hash = fieldSetFlags()[0] ? this.hash : (java.lang.String) defaultValue(fields()[0]);
        record.hashSession = fieldSetFlags()[1] ? this.hashSession : (java.lang.String) defaultValue(fields()[1]);
        record.userid = fieldSetFlags()[2] ? this.userid : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.created = fieldSetFlags()[4] ? this.created : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TokenDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<TokenDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TokenDto>
    READER$ = (org.apache.avro.io.DatumReader<TokenDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.hash);

    out.writeString(this.hashSession);

    out.writeString(this.userid);

    out.writeLong(this.timestamp);

    out.writeLong(this.created);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.hash = in.readString();

      this.hashSession = in.readString();

      this.userid = in.readString();

      this.timestamp = in.readLong();

      this.created = in.readLong();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.hash = in.readString();
          break;

        case 1:
          this.hashSession = in.readString();
          break;

        case 2:
          this.userid = in.readString();
          break;

        case 3:
          this.timestamp = in.readLong();
          break;

        case 4:
          this.created = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










